#version 430 core

layout (local_size_x = 32, local_size_y = 32) in;
// r -> terrainHeight, g -> waterHeight, b -> sediment, a -> constant rain rate.
layout (rgba32f, binding = 0) uniform highp image2D nextHeightTex;
layout (rgba32f, binding = 1) uniform highp image2D nextOutflowTex;
layout (rgba32f, binding = 2) uniform highp image2D nextVelocityTex;

layout (rgba32f, binding = 3) readonly uniform highp image2D currentHeightTex;
layout (rgba32f, binding = 4) readonly uniform highp image2D currentOutflowTex;
layout (rgba32f, binding = 5) readonly uniform highp image2D currentVelocityTex;

const float sedimentCapacity = 0.2;
const float soilSuspensionRate = 0.2;
const float sedimentDepositionRate = 0.2;
const float deltaTime = 0.02;

void main() {
    /////----------------------------------
    vec4 currentHeightTexel, currentOutflowTexel, currentVelocityTexel;
    vec4 nextHeightTexel, nextOutflowTexel, nextVelocityTexel;
    /////----------------------------------
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 leftStorePos = ivec2(storePos.x - 1, storePos.y);
    ivec2 rightStorePos = ivec2(storePos.x + 1, storePos.y);
    ivec2 topStorePos = ivec2(storePos.x, storePos.y - 1);
    ivec2 bottomStorePos = ivec2(storePos.x, storePos.y + 1);
    // Current Data
    currentHeightTexel = imageLoad(currentHeightTex, storePos);
    // Next Data
    nextHeightTexel = imageLoad(nextHeightTex, storePos);
    nextOutflowTexel = imageLoad(nextOutflowTex, storePos);
    nextVelocityTexel = imageLoad(nextVelocityTex, storePos);

    // Load directional height data.
    vec4 leftCurrentHeightTexel = imageLoad(currentHeightTex, leftStorePos);
    vec4 rightCurrentHeightTexel = imageLoad(currentHeightTex, rightStorePos);
    vec4 topCurrentHeightTexel = imageLoad(currentHeightTex, topStorePos);
    vec4 bottomCurrentHeightTexel = imageLoad(currentHeightTex, bottomStorePos);

    // Get total terrain height (water + land column)
    float centreCurrentTerrainHeight = currentHeightTexel.r;
    float leftCurrentTerrainHeight = leftCurrentHeightTexel.r ;
    float rightCurrentTerrainHeight = rightCurrentHeightTexel.r;
    float topCurrentTerrainHeight = topCurrentHeightTexel.r;
    float bottomCurrentTerrainHeight = bottomCurrentHeightTexel.r;

    // Calculating the tilt angle
    // Based on:
    // https://math.stackexchange.com/questions/1044044/local-tilt-angle-based-on-height-field
    float dx = (rightCurrentTerrainHeight - leftCurrentTerrainHeight) / 2.0;
    float dy = (bottomCurrentTerrainHeight - topCurrentTerrainHeight) / 2.0;
    float changes = dx * dx + dy * dy;
    float tiltAngle = sqrt(1.0 - sqrt(changes) / sqrt(1.0 + changes));

    // Get the velocity magnitude
    float velocityMagnitude = nextVelocityTexel.r;

    // Calculate the water sediment carry capacity (how much sediment can this grid cell carry?)
    // Notation: {C}
    float currentSedimentCarryCapacity = sedimentCapacity * min(tiltAngle, 0.1) * velocityMagnitude;


    // Caclulate the sediment carry capacity for the current grid point.
    // Notation: {St}.
    float currentDissolvedSediment = nextHeightTexel.b;

    // Carry out erosion or deposition based upon the calculated carry capacity.
    // TODO: Look at manipulating the water height here too "stability".
    if(currentDissolvedSediment < currentSedimentCarryCapacity) {
        // Dissolve land into water as sediment.
        // TODO: Involve R(x, y) a hardness coefficient, maybe make upper regions harder?
        float delta = soilSuspensionRate * (currentSedimentCarryCapacity - currentDissolvedSediment);
        nextHeightTexel.r -= deltaTime * delta; // Terrain height
        nextHeightTexel.g += deltaTime * delta; // Water Height.
        nextHeightTexel.b += deltaTime * delta; // Sediment
    } else {
        // Deposit sediment onto land.
        float delta = sedimentDepositionRate * (currentDissolvedSediment - currentSedimentCarryCapacity);
        nextHeightTexel.r +=  deltaTime * delta; // Terrain height
        nextHeightTexel.g -= deltaTime * delta; // Water Height.
        nextHeightTexel.b -=  deltaTime * delta; // Sediment
    }
    nextHeightTexel.g *= (1.0 - 0.015 * deltaTime);

    imageStore(nextHeightTex, storePos, nextHeightTexel);
    imageStore(nextOutflowTex, storePos, nextOutflowTexel);
    imageStore(nextVelocityTex, storePos, nextVelocityTexel);
}