#version 430 core

layout (local_size_x = 32, local_size_y = 32) in;
layout (rgba32f, binding = 0) uniform highp image2D nextHeightTex;
layout (rgba32f, binding = 1) uniform highp image2D nextOutflowTex;
layout (rgba32f, binding = 2) uniform highp image2D nextVelocityTex;

layout (rgba32f, binding = 3) readonly uniform highp image2D currentHeightTex;
layout (rgba32f, binding = 4) readonly uniform highp image2D currentOutflowTex;
layout (rgba32f, binding = 5) readonly uniform highp image2D currentVelocityTex;

// uniform: deltaTime

const float deltaTime = 0.02;
const float pipeCrossSectionalArea = 20.0;
const float gravitationalConstant = 9.81;

void main() {
    // TODO: 1. Bounds check
    // TODO: 2. Set outflow to zero if at bounds
    // TODO: 3. Double check variables
    // TODO: 4. Ensure that min/max checks are carried out where appropriate
    // TODO: 5. Abstract texel lookups into dedicated method.

    /////----------------------------------

    vec4 currentOutflowTexel;
    vec4 nextHeightTexel;

    /////----------------------------------

    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    nextHeightTexel = imageLoad(nextHeightTex, storePos);
    currentOutflowTexel = imageLoad(currentOutflowTex, storePos);

    /////----------------------------------

    float currentTerrainHeight = nextHeightTexel.r;
    float nextWaterHeight = nextHeightTexel.g;
    float totalHeight = currentTerrainHeight + nextWaterHeight;
    float pressure = deltaTime * pipeCrossSectionalArea * gravitationalConstant;

    /////------------LEFT OUTFLOW---------////////
    ivec2 leftStorePos = ivec2(storePos.x - 1, storePos.y);
    vec4 leftCurrentHeightTexel = imageLoad(currentHeightTex, leftStorePos);
    vec4 leftNextHeightTexel = imageLoad(nextHeightTex, leftStorePos);

    float leftCurrentTerrainHeight = leftCurrentHeightTexel.r;
    // We use the "next" water height because this has just been updated in the previous
    // step of the pipeline, which increments the water height.
    // TODO: Look at using "current", does this make a difference?
    float leftNextWaterHeight = leftNextHeightTexel.g;
    float leftTotalHeight = leftCurrentTerrainHeight + leftNextWaterHeight;

    float leftHeightDiff = totalHeight - leftTotalHeight;
    float leftOutflow = max(0.0, currentOutflowTexel.r + pressure * leftHeightDiff);

    /////------------RIGHT OUTFLOW---------////////
    ivec2 rightStorePos = ivec2(storePos.x + 1, storePos.y);
    vec4 rightCurrentHeightTexel = imageLoad(currentHeightTex, rightStorePos);
    vec4 rightNextHeightTexel = imageLoad(nextHeightTex, rightStorePos);

    float rightCurrentTerrainHeight = rightCurrentHeightTexel.r;
    float rightNextWaterHeight = rightNextHeightTexel.g;
    float rightTotalHeight = rightCurrentTerrainHeight + rightNextWaterHeight;

    float rightHeightDiff = totalHeight - rightTotalHeight;
    float rightOutflow = max(0.0, currentOutflowTexel.g + pressure * rightHeightDiff);

    /////------------TOP OUTFLOW---------////////
    ivec2 topStorePos = ivec2(storePos.x, storePos.y - 1);
    vec4 topCurrentHeightTexel = imageLoad(currentHeightTex, topStorePos);
    vec4 topNextHeightTexel = imageLoad(nextHeightTex, topStorePos);

    float topCurrentTerrainHeight = topCurrentHeightTexel.r;
    float topNextWaterHeight = topNextHeightTexel.g;
    float topTotalHeight = topCurrentTerrainHeight + topNextWaterHeight;

    float topHeightDiff = totalHeight - topTotalHeight;
    float topOutflow = max(0.0, currentOutflowTexel.b + pressure * topHeightDiff);

    /////------------BOTTOM OUTFLOW---------////////
    ivec2 bottomStorePos = ivec2(storePos.x, storePos.y + 1);
    vec4 bottomCurrentHeightTexel = imageLoad(currentHeightTex, bottomStorePos);
    vec4 bottomNextHeightTexel = imageLoad(nextHeightTex, bottomStorePos);

    float bottomCurrentTerrainHeight = bottomCurrentHeightTexel.r;
    float bottomNextWaterHeight = bottomNextHeightTexel.g;
    float bottomTotalHeight = bottomCurrentTerrainHeight + bottomNextWaterHeight;

    float bottomHeightDiff = totalHeight - bottomTotalHeight;
    float bottomOutflow = max(0.0, currentOutflowTexel.a + pressure * bottomHeightDiff);


    /////------------TOTAL OUTFLOW---------////////
    float flux = leftOutflow + rightOutflow + topOutflow + bottomOutflow;
    float scale = min(1.0, nextWaterHeight / (flux * deltaTime));


    if(storePos.x == 0) {
        leftOutflow = 0.0;
    }

    if(storePos.y == 0) {
        topOutflow = 0.0;
    }

    if(storePos.x == 511) {
        rightOutflow = 0.0;
    }

    if(storePos.y == 511) {
        bottomOutflow = 0.0;
    }

    /**
     * Cell outflow vector direction mapping
     * r -> left
     * g -> right
     * b -> top
     * a -> bottom
     */
    vec4 nextOutflowTexel = vec4(
        max(0.0, leftOutflow*scale),
        max(0.0, rightOutflow*scale),
        max(0.0, topOutflow*scale),
        max(0.0, bottomOutflow*scale)
    );

    imageStore(nextOutflowTex, storePos, nextOutflowTexel);
}